Pipeline syntax differences
Declarative pipelines always begin with the word pipeline. Scripted pipelines, on the other hand, always begin with the word node. 
Declarative pipelines break down stages into individual stages that can contain multiple steps. Scripted pipelines use Groovy code and references to the Jenkins pipeline DSL within the stage elements without the need for steps.

Build Triggers
GitHub hook trigger for GITScm polling 
Build periodically = set up a cron job
poll scm 
  Poll SCM will check for changes before triggering any build, if there are changes to the previous version there only build will be triggered.

Pipeline
under pipeline while creating a new pipeline we can either either write pipeline script [declarative] with using pipeline syntax 
or we can use pipeline script from scm and point out the jenkins file dir where we store the script in git hub
pipeline syntax : using pipeline syntax we can build the steps in script

---------------------
pipeline {
    agent any #1
    stages {
        stage('Build') {  #2
            steps { #3
                // 
            }
		}
	}
}
--------------------
configure : edit the pipeline			
#1 = Execute this Pipeline or any of its stages, on any available agent.
#2 = Defines the "Build" stage.
#3 = Perform some steps related to the "Build" stage. usually commands.
agent any = pipeline will be executed either on the master or on any available worker node
             since we use docker as an agent we define docker in between agent any
stage{} = all the diff stage must be written between the stages{}
whatever name u define in stage, it will be the job name as well 
       stage('Build') = job name is build
sh 'echo $PATH' = cmd u wanna execute in steps must be written in sh ''

--------------------
pipeline {
    agent any
	
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Build') {
            steps {
                sh 'echo $PATH'
            }
        }
    }
}
----------------------

1. create a docker file which has image and some instructions.
2. build the image using the docker file
3. then run the image produced from building docker file to create docker container
4. access the application running in docker container
always run container in detached mode

create file with 'hello world' in it
create docker file same dir
FROM nginx

copy index.html /usr/share/nginx/html

docker build -t sai .
docker run -dt -P image-name
docker ps
add container-ip to in bound rule
https://public-ip:container-ip




pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://34.201.116.83:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "iam-veeramalla"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "abhishek.xyz@gmail.com"
                    git config user.name "Abhishek Veeramalla"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}




sudo apt update && sudo apt install openjdk-11-jre -y && curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null && echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null && sudo apt-get update && sudo apt-get install jenkins -y && sudo apt install -y docker.io git && sudo usermod -aG docker ubuntu && git init && git clone https://github.com/iam-veeramalla/Docker-Zero-to-Hero && exit


sudo apt install -y docker.io git && sudo usermod -aG docker ubuntu && git init && git clone https://github.com/iam-veeramalla/Docker-Zero-to-Hero && exit
